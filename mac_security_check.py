#!/usr/bin/env python3
import subprocess
import json
import re
import os
from datetime import datetime


# Fonction pour ex√©cuter des commandes shell
def run_command(cmd):
    return subprocess.run(
        cmd, shell=True, capture_output=True, text=True
    ).stdout.strip()


# V√©rifier les connexions r√©seaux √©tablies (ports suspects)
def check_network_connections():
    print("\n--- V√©rification des connexions r√©seau suspectes ---")
    netstat_output = run_command("lsof -i -P -n | grep ESTABLISHED")
    suspicious_ports = ["1337", "31337", "6667", "12345", "31338"]
    alerts = []

    for line in netstat_output.split("\n"):
        if any(port in line for port in suspicious_ports):
            alerts.append(line)

    if alerts:
        print("‚ö†Ô∏è Ports suspects d√©tect√©s :")
        print("\n".join(alerts))
        return False
    else:
        print("‚úÖ Aucune connexion suspecte d√©tect√©e.")
        return True


# V√©rifier les utilisateurs connect√©s
def check_logged_users():
    print("\n--- V√©rification des utilisateurs connect√©s ---")
    users = run_command("who")
    users_list = users.split("\n")

    if len(users_list) > 1:
        print("‚ö†Ô∏è Multiples utilisateurs connect√©s :")
        print(users)
        return False
    else:
        print("‚úÖ Un seul utilisateur connect√©.")
        return True


# V√©rification des processus suspects
def check_suspicious_processes():
    print("\n--- V√©rification des processus suspects ---")
    ps_output = run_command("ps aux")
    suspicious_patterns = [
        "keylogger",
        "crypto",
        "miner",
        "rootkit",
        "nc -l",
        "netcat",
        "nmap",
    ]
    alerts = []

    for line in ps_output.split("\n"):
        if any(pattern in line.lower() for pattern in suspicious_patterns):
            alerts.append(line)

    if alerts:
        print("‚ö†Ô∏è Processus suspects d√©tect√©s :")
        print("\n".join(alerts))
        return False
    else:
        print("‚úÖ Aucun processus suspect d√©tect√©.")
        return True


# V√©rification des t√¢ches planifi√©es suspectes (crontab)
def check_crontab():
    print("\n--- V√©rification des t√¢ches cron suspectes ---")
    cron_output = run_command("crontab -l")
    suspicious_patterns = ["curl ", "wget ", "nc ", "bash -i"]
    alerts = []

    for line in cron_output.split("\n"):
        if any(pattern in line.lower() for pattern in suspicious_patterns):
            alerts.append(line)

    if alerts:
        print("‚ö†Ô∏è T√¢ches cron suspectes d√©tect√©es :")
        print("\n".join(alerts))
        return False
    else:
        print("‚úÖ Aucune t√¢che cron suspecte d√©tect√©e.")
        return True


# V√©rification des fichiers r√©cents suspects modifi√©s dans les dossiers sensibles
def check_recent_files():
    print(
        "\n--- V√©rification des fichiers modifi√©s r√©cemment dans les dossiers sensibles ---"
    )
    dirs = ["/Library/LaunchAgents", "/Library/LaunchDaemons", "~/Library/LaunchAgents"]
    suspicious_files = []

    for dir_path in dirs:
        dir_path = os.path.expanduser(dir_path)
        if os.path.exists(dir_path):
            for root, dirs, files in os.walk(dir_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                    if (datetime.now() - mod_time).days < 7:
                        suspicious_files.append(f"{file_path} modifi√© le {mod_time}")

    if suspicious_files:
        print("‚ö†Ô∏è Fichiers suspects modifi√©s r√©cemment d√©tect√©s :")
        print("\n".join(suspicious_files))
        return False
    else:
        print("‚úÖ Aucun fichier r√©cent suspect d√©tect√©.")
        return True


# V√©rification des binaires syst√®mes modifi√©s r√©cemment
def check_binary_modifications():
    print("\n--- V√©rification des binaires syst√®me modifi√©s r√©cemment ---")
    dirs = ["/usr/bin", "/usr/local/bin"]
    alerts = []

    for path in dirs:
        if os.path.exists(path):
            for root, dirs, files in os.walk(path):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                        if (datetime.now() - mod_time).days < 14:
                            alerts.append(f"{file_path} modifi√© le {mod_time}")
                    except Exception:
                        continue

    if alerts:
        print("‚ö†Ô∏è Binaires syst√®me modifi√©s r√©cemment :")
        print("\n".join(alerts))
        return False
    else:
        print("‚úÖ Aucun binaire syst√®me modifi√© r√©cemment.")
        return True


# V√©rification des permissions syst√®me sensibles (TCC.db)
def check_privacy_permissions():
    print("\n--- V√©rification des applications avec acc√®s complet au disque ---")
    tcc_db_path = os.path.expanduser(
        "~/Library/Application Support/com.apple.TCC/TCC.db"
    )
    if not os.path.exists(tcc_db_path):
        print("‚ö†Ô∏è TCC.db non trouv√©, acc√®s complet au disque non v√©rifiable.")
        return True

    try:
        output = run_command(
            f"sqlite3 '{tcc_db_path}' \"SELECT client, service FROM access WHERE service='SystemPolicyAllFiles';\""
        )
        if output:
            print("‚ö†Ô∏è Applications avec acc√®s complet au disque :")
            print(output)
            return False
        else:
            print("‚úÖ Aucune application non autoris√©e avec acc√®s complet au disque.")
            return True
    except Exception as e:
        print(f"Erreur lors de l'acc√®s √† TCC.db : {e}")
        return True


# V√©rification des extensions syst√®me install√©es
def check_system_extensions():
    print("\n--- V√©rification des extensions syst√®me install√©es ---")
    output = run_command("systemextensionsctl list")
    print(output or "Aucune extension syst√®me list√©e.")
    return True


# Analyse des logs syst√®me pour comportements anormaux
def check_system_logs():
    print("\n--- Analyse des logs syst√®me (recherches de commandes suspectes) ---")
    keywords = [
        "launchctl",
        "curl",
        "wget",
        "bash -i",
        "reverse shell",
        "base64",
        "python -m http.server",
    ]
    command = "log show --predicate 'eventMessage CONTAINS \"{}\"' --info --last 7d"
    found = False
    for keyword in keywords:
        result = run_command(command.format(keyword))
        if result:
            print(f"‚ö†Ô∏è D√©tection de l'activit√© suspecte li√©e √† : {keyword}")
            print(result[:1000])  # tronquer pour √©viter surcharge
            found = True
    if not found:
        print("‚úÖ Aucun log suspect d√©tect√©.")
    return not found


# R√©sultat final (Bilan)
def final_assessment():
    print("\n\n=== Bilan final de s√©curit√© ===")
    checks = [
        check_network_connections(),
        check_logged_users(),
        check_suspicious_processes(),
        check_crontab(),
        check_recent_files(),
        check_binary_modifications(),
        check_privacy_permissions(),
        check_system_extensions(),
        check_system_logs(),
    ]

    if all(checks):
        print("\n‚úÖ Votre syst√®me ne pr√©sente aucun signe √©vident de compromission.")
    else:
        print(
            "\n‚ö†Ô∏è Des signes suspects ont √©t√© d√©tect√©s ! Approfondissez imm√©diatement les v√©rifications ou consultez un expert en cybers√©curit√©."
        )


# Ex√©cution du diagnostic
if __name__ == "__main__":
    print("üîç D√©but du diagnostic de s√©curit√© chirurgical sur votre MacBook Pro üîç")
    final_assessment()
